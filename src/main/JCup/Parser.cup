/* Paquete donde se guardará la clase */
package com.compiladorchilero.analyzers;

/* Imports necesarios */
import java.util.*;
import com.compiladorchilero.models.*;
import com.compiladorchilero.controllers.*;

class Parser;

/* Codigo de usuario */
parser code {:
    private LinkedList<Instruction> AST;
    private LinkedList<String> errorList;

    public Parser(Lexer lex){
        super(lex);
        this.AST = new LinkedList<Instruction>();
        this.errorList = new LinkedList<String>();
    }

    public void syntax_error(Token token){ 
        errorList.add("Error Sintáctico en la Línea " + token.getLine() +" Columna "+token.getColumn()+ ". No se esperaba este componente: " +token.getLexeme()+".");
    } 

    public void unrecovered_syntax_error(Token token) throws java.lang.Exception{ 
        errorList.add("Error síntactico irrecuperable en la Línea " + token.getLine()+ " Columna "+token.getColumn()+". Componente " + token.getLexeme() + " no reconocido.");
    }  

    public LinkedList<Instruction> getAST() {
        return AST;
    }

    public LinkedList<String> getErrorList(){
        return errorList;
    }
:}

/* Declaracion de terminales */
terminal Token LBRACE;
terminal Token RBRACE;
terminal Token COLON;
terminal Token COMMA;
terminal Token SEMICOLON;
terminal Token LPAREN;
terminal Token RPAREN;
terminal Token EQUALS;
terminal Token PLUS;
terminal Token MINUS;
terminal Token MULT;
terminal Token DIV;
terminal Token LT; /*<*/
terminal Token GT; /*>*/
terminal Token EXCLAMATION;
terminal Token OR;
terminal Token INT;
terminal Token STRING;
terminal Token FLOAT;
terminal Token IF;
terminal Token ELSE;
terminal Token FOR;
terminal Token WHILE;
terminal Token READ;
terminal Token WRITE;
terminal Token IDENTIFIER;
terminal Token INT_CONST;
terminal Token STR_CONST;
terminal Token FLOAT_CONST;
terminal Token INCREMENT;
terminal Token DECREMENT;
terminal Token CHARACTER;
terminal Token CHARACTER_CONST;
terminal Token UMINUS;
terminal Token SWITCH;
terminal Token CASE;
terminal Token DEFAULT;
terminal Token BREAK;
terminal Token TRUE;
terminal Token FALSE;
terminal Token BOOLEAN;
terminal Token VOID;
terminal Token FUNC;
terminal Token CONCAT;


/* Declaracion de elementos no terminales */
non terminal file;
non terminal LinkedList<Instruction> instructions_list;
non terminal Instruction instruction;
non terminal LinkedList<Instruction> else_ifs;
non terminal LinkedList<Case> case_list;
non terminal LinkedList<Instruction> parameter_list;
non terminal Operation numerical_expresion;
non terminal Operation logical_expression;
non terminal Operation boolean_value;
non terminal Instruction function;
non terminal String var_type;
non terminal Instruction declaration;
non terminal Operation value;
non terminal Operation concat_expr;
non terminal callFunc_Paramlist;

/* Declaracion de precedencia */
precedence left CONCAT;
precedence left PLUS, MINUS;
precedence left DIV, MULT;
precedence right UMINUS;
precedence nonassoc LPAREN, RPAREN;
precedence nonassoc INCREMENT,DECREMENT; 

/* Definimos con que simbolo no terminal inicia */
start with file;

file ::=  instructions_list:a   {: parser.AST=a; :}
        ;

instructions_list ::=   instructions_list:a instruction:b   {: RESULT = a; RESULT.add(b); :}
                    |   instruction:a                       {: RESULT = new LinkedList<>(); RESULT.add(a); :}
                    ;

instruction ::=  WRITE LPAREN STR_CONST:a RPAREN SEMICOLON                                                                                  {: RESULT = new Print(new Operation(a.getLexeme(), OperationType.STRING)); :}
              |  WRITE LPAREN INT_CONST:a RPAREN SEMICOLON                                                                                  {: RESULT = new Print(new Operation(a.getLexeme(), OperationType.NUMBER)); :}
              |  WRITE LPAREN FLOAT_CONST:a RPAREN SEMICOLON                                                                                {: RESULT = new Print(new Operation(a.getLexeme(), OperationType.FLOAT)); :}
              |  WRITE LPAREN CHARACTER_CONST:a RPAREN SEMICOLON                                                                            {: RESULT = new Print(new Operation(a.getLexeme(), OperationType.CHARACTER)); :}
              |  WRITE LPAREN IDENTIFIER:a RPAREN SEMICOLON                                                                                 {: RESULT = new Print(a.getLexeme(), new Operation(a.getLexeme(), OperationType.IDENTIFIER), OperationType.IDENTIFIER); :}
              |  WRITE LPAREN concat_expr:a RPAREN SEMICOLON                                                                                {: RESULT = new Print(a); :}
              |  READ LPAREN IDENTIFIER:a RPAREN SEMICOLON                                                                                  {: RESULT = new Read(a.getLexeme()); :}
              |  declaration:a SEMICOLON                                                                                                    {: RESULT = a; :}
              |  IDENTIFIER:a LPAREN callFunc_Paramlist RPAREN SEMICOLON                                                                      {: RESULT = new CallFunction(a.getLexeme()); :} 
              |  IDENTIFIER:a LPAREN RPAREN SEMICOLON                                                                                         {: RESULT = new CallFunction(a.getLexeme()); :}      
              |  IDENTIFIER:a EQUALS value:b SEMICOLON                                                                                     {: RESULT = new Assignment(a.getLexeme(), b); :}
              |  IF LPAREN logical_expression:a RPAREN LBRACE instructions_list:b RBRACE                                                    {: RESULT = new If(a,b); :}
              |  IF LPAREN logical_expression:a RPAREN LBRACE instructions_list:b RBRACE ELSE LBRACE instructions_list:c RBRACE             {: RESULT = new If(a,b,c); :}
              |  IF LPAREN logical_expression:a RPAREN LBRACE instructions_list:b RBRACE else_ifs:c                                         {: RESULT = new If(a,b,c,null); :}
              |  IF LPAREN logical_expression:a RPAREN LBRACE instructions_list:b RBRACE else_ifs:c ELSE RBRACE instructions_list:d LBRACE  {: RESULT = new If(a,b,c,d); :}
              |  IDENTIFIER:a INCREMENT SEMICOLON                                                                                             {: RESULT = new Increment(a.getLexeme()); :}
              |  IDENTIFIER:a DECREMENT SEMICOLON                                                                                             {: RESULT = new Decrement(a.getLexeme()); :}
              |  WHILE LPAREN logical_expression:a RPAREN LBRACE instructions_list:b RBRACE                                                 {: RESULT = new While(a, b); :}
              |  FOR LPAREN INT_CONST:a COMMA INT_CONST:b RPAREN LBRACE instructions_list:c RBRACE                                          {: RESULT = new For(Integer.valueOf(a.getLexeme()), Integer.valueOf(b.getLexeme()), c); :}                
              |  SWITCH LPAREN IDENTIFIER:a RPAREN LBRACE case_list:b RBRACE                                                               {: RESULT = new Switch(a, b); :}
              |  function:a                                                                                                                   {: RESULT = a; :}              
              |  error
              ;

declaration ::= var_type:a IDENTIFIER:i                                                                                                     {:
                                                                                                                                                switch(a){
                                                                                                                                                    case "cadena":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.STRING);
                                                                                                                                                    break;
                                                                                                                                                    case "entero":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.NUMBER);
                                                                                                                                                    break;
                                                                                                                                                    case "flotante":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.FLOAT);
                                                                                                                                                    break;
                                                                                                                                                    case "caracter":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.CHARACTER);
                                                                                                                                                    break;
                                                                                                                                                    case "booleano":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.BOOLEAN);
                                                                                                                                                    break;
                                                                                                                                                    default:
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.INVALID);
                                                                                                                                                    break;
                                                                                                                                                }                            
                                                                                                                                            :}
            ;

var_type ::=    INT:a               {: RESULT = a.getLexeme(); :}
            |   STRING:a            {: RESULT = a.getLexeme(); :}
            |   FLOAT:a             {: RESULT = a.getLexeme(); :}
            |   CHARACTER:a         {: RESULT = a.getLexeme(); :}
            |   BOOLEAN:a           {: RESULT = a.getLexeme(); :}
            ;

else_ifs ::= else_ifs:a ELSE LPAREN logical_expression:b RPAREN LBRACE instructions_list:c RBRACE       {: RESULT = a; RESULT.add(new If(b,c)); :}
           | ELSE IF LPAREN logical_expression:a RPAREN LBRACE instructions_list:b RBRACE               {: RESULT = new LinkedList<>(); RESULT.add(new If(a,b)); :}
           ;

case_list ::= case_list:a DEFAULT COLON instructions_list:b BREAK SEMICOLON       {: RESULT = a; RESULT.add(new Case(null, b)); :}
            | CASE value:a COLON instructions_list:b BREAK SEMICOLON              {: RESULT = new LinkedList<>(); RESULT.add(new Case(a, b)); :}
            ;

numerical_expresion ::=    numerical_expresion:a PLUS numerical_expresion:b                        {: RESULT = new Operation(a, b, OperationType.ADDITION); :}
                |          numerical_expresion:a MINUS  numerical_expresion:b                      {: RESULT = new Operation(a, b, OperationType.SUBSTRACTION); :}
                |          numerical_expresion:a MULT  numerical_expresion:b                       {: RESULT = new Operation(a, b, OperationType.MULTIPLICATION); :}
                |          numerical_expresion:a DIV  numerical_expresion:b                        {: RESULT = new Operation(a, b, OperationType.DIVISION); :}
                |          MINUS  numerical_expresion:a                                            {: RESULT = new Operation(a, OperationType.NEGATIVE); :}%prec UMINUS
                |          LPAREN  numerical_expresion:a RPAREN                                    {: RESULT = a; :} 
                |          INT_CONST:a                                                             {: RESULT = new Operation(new Double(a.getLexeme())); :}
                |          FLOAT_CONST:a                                                           {: RESULT = new Operation(new Double(a.getLexeme()), OperationType.FLOAT); :}
                |          CHARACTER_CONST:a                                                       {: RESULT = new Operation(a.getLexeme(), OperationType.CHARACTER); :}
                |          IDENTIFIER:a                                                            {: RESULT = new Operation(a.getLexeme(), OperationType.IDENTIFIER); :}
                ;
                    
logical_expression ::=  value:a EQUALS EQUALS value:b                              {: RESULT = new Operation(a, b, OperationType.EQUALS_EQUALS); :}
                     |  numerical_expresion:a LT numerical_expresion:b             {: RESULT = new Operation(a, b, OperationType.LESS_THAN); :}
                     |  numerical_expresion:a GT numerical_expresion:b             {: RESULT = new Operation(a, b, OperationType.GREATHER_THAN); :}
                     |  numerical_expresion:a LT EQUALS numerical_expresion:b      {: RESULT = new Operation(a, b, OperationType.LESS_THAN_EQUALS); :}
                     |  numerical_expresion:a GT EQUALS numerical_expresion:b      {: RESULT = new Operation(a, b, OperationType.GREATHER_THAN_EQUALS); :}
                     ;        

value ::= numerical_expresion:a       {: RESULT = a; :}
        | STR_CONST:a                 {: RESULT = new Operation(a.getLexeme(), OperationType.STRING); :}
        | boolean_value:a             {: RESULT = a; :}
        ;

boolean_value ::=   TRUE:a            {: RESULT = new Operation(a.getLexeme(), OperationType.BOOLEAN); :}
                |   FALSE:a           {: RESULT = new Operation(a.getLexeme(), OperationType.BOOLEAN); :}
                ;

function ::= VOID IDENTIFIER:a LPAREN RPAREN LBRACE instructions_list:i RBRACE                           {: RESULT = new FunctionDeclaration(a.getLexeme(), i);  :}
          |  VOID IDENTIFIER:a LPAREN parameter_list:p RPAREN  LBRACE instructions_list:i RBRACE         {: RESULT = new FunctionDeclaration(a.getLexeme(), p, i); :}
          |  FUNC var_type:a IDENTIFIER:n LPAREN RPAREN LBRACE instructions_list:i RBRACE                  {: RESULT = new FunctionDeclaration(a, n.getLexeme(), i); :}
          |  FUNC var_type:a IDENTIFIER:n LPAREN parameter_list:p LBRACE instructions_list:i RBRACE        {: RESULT = new FunctionDeclaration(a, n.getLexeme(), p, i); :}  
          ;

parameter_list ::=  parameter_list:a COMMA declaration:b  {: RESULT = a; RESULT.add(b); :}
                |   declaration:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
                ;

concat_expr ::= concat_expr:a CONCAT concat_expr:b          {:RESULT = new Operation(a,b,OperationType.CONCAT);:}
             |  value:a                                       {:RESULT = a;:}
             ;

callFunc_Paramlist ::= callFunc_Paramlist IDENTIFIER COMMA
                    |  IDENTIFIER COMMA
                    ;