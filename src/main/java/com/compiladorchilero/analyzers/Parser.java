
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladorchilero.analyzers;

import java.util.*;
import java_cup.runtime.*;
import javax.swing.JTextArea;
import com.compiladorchilero.models.*;
import com.compiladorchilero.controllers.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\006\000\002\004\011\000\002\004\015\000\002" +
    "\004\012\000\002\004\016\000\002\004\005\000\002\004" +
    "\005\000\002\004\011\000\002\004\013\000\002\004\011" +
    "\000\002\004\003\000\002\005\012\000\002\005\012\000" +
    "\002\006\011\000\002\006\010\000\002\007\010\000\002" +
    "\007\007\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\004\000\002\010\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\002\000\002\012\005\000\002\012\005\000\002\012" +
    "\006\000\002\012\006\000\002\013\003\000\002\013\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\030\003\015\024\006\025\012\026\021\027" +
    "\013\031\010\032\005\034\016\035\020\043\007\046\017" +
    "\001\002\000\040\002\ufffe\003\ufffe\004\ufffe\005\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\034\ufffe" +
    "\035\ufffe\043\ufffe\046\ufffe\051\ufffe\001\002\000\004\011" +
    "\174\001\002\000\004\035\172\001\002\000\004\035\170" +
    "\001\002\000\004\011\160\001\002\000\004\002\157\001" +
    "\002\000\004\035\155\001\002\000\004\011\120\001\002" +
    "\000\032\002\000\003\015\024\006\025\012\026\021\027" +
    "\013\031\010\032\005\034\016\035\020\043\007\046\017" +
    "\001\002\000\040\002\uffee\003\uffee\004\uffee\005\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\031\uffee\032\uffee\034\uffee" +
    "\035\uffee\043\uffee\046\uffee\051\uffee\001\002\000\004\011" +
    "\113\001\002\000\004\011\070\001\002\000\010\013\024" +
    "\041\026\042\025\001\002\000\004\035\022\001\002\000" +
    "\004\010\023\001\002\000\040\002\ufffa\003\ufffa\004\ufffa" +
    "\005\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\031\ufffa\032" +
    "\ufffa\034\ufffa\035\ufffa\043\ufffa\046\ufffa\051\ufffa\001\002" +
    "\000\022\010\uffdb\011\042\015\032\035\041\036\033\037" +
    "\037\040\031\044\036\001\002\000\004\010\030\001\002" +
    "\000\004\010\027\001\002\000\040\002\ufff3\003\ufff3\004" +
    "\ufff3\005\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3" +
    "\032\ufff3\034\ufff3\035\ufff3\043\ufff3\046\ufff3\051\ufff3\001" +
    "\002\000\040\002\ufff2\003\ufff2\004\ufff2\005\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\031\ufff2\032\ufff2\034\ufff2\035" +
    "\ufff2\043\ufff2\046\ufff2\051\ufff2\001\002\000\024\006\uffe0" +
    "\010\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\001\002\000\016\011\042\015\032\035\041" +
    "\036\033\040\031\044\036\001\002\000\024\006\uffe1\010" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\001\002\000\022\006\uffdc\010\uffdc\014\047\015" +
    "\050\016\045\017\051\020\057\021\060\001\002\000\006" +
    "\006\uffd5\010\uffd5\001\002\000\024\006\uffdf\010\uffdf\012" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\001\002\000\010\006\uffdd\010\uffdd\012\uffdd\001\002\000" +
    "\004\010\056\001\002\000\024\006\uffde\010\uffde\012\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\001" +
    "\002\000\016\011\042\015\032\035\041\036\033\040\031" +
    "\044\036\001\002\000\006\006\uffd6\010\uffd6\001\002\000" +
    "\014\012\046\014\047\015\050\016\045\017\051\001\002" +
    "\000\016\011\042\015\032\035\041\036\033\040\031\044" +
    "\036\001\002\000\024\006\uffe2\010\uffe2\012\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\001\002\000" +
    "\016\011\042\015\032\035\041\036\033\040\031\044\036" +
    "\001\002\000\016\011\042\015\032\035\041\036\033\040" +
    "\031\044\036\001\002\000\016\011\042\015\032\035\041" +
    "\036\033\040\031\044\036\001\002\000\024\006\uffe4\010" +
    "\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\001\002\000\024\006\uffe6\010\uffe6\012\uffe6\014" +
    "\uffe6\015\uffe6\016\045\017\051\020\uffe6\021\uffe6\001\002" +
    "\000\024\006\uffe7\010\uffe7\012\uffe7\014\uffe7\015\uffe7\016" +
    "\045\017\051\020\uffe7\021\uffe7\001\002\000\024\006\uffe5" +
    "\010\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\001\002\000\040\002\ufff8\003\ufff8\004\ufff8" +
    "\005\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\031\ufff8\032" +
    "\ufff8\034\ufff8\035\ufff8\043\ufff8\046\ufff8\051\ufff8\001\002" +
    "\000\020\011\042\013\064\015\032\035\041\036\033\040" +
    "\031\044\036\001\002\000\020\011\042\013\061\015\032" +
    "\035\041\036\033\040\031\044\036\001\002\000\016\011" +
    "\042\015\032\035\041\036\033\040\031\044\036\001\002" +
    "\000\020\006\uffd9\010\uffd9\012\uffd9\014\047\015\050\016" +
    "\045\017\051\001\002\000\020\006\uffd7\010\uffd7\012\uffd7" +
    "\014\047\015\050\016\045\017\051\001\002\000\016\011" +
    "\042\015\032\035\041\036\033\040\031\044\036\001\002" +
    "\000\020\006\uffda\010\uffda\012\uffda\014\047\015\050\016" +
    "\045\017\051\001\002\000\020\006\uffd8\010\uffd8\012\uffd8" +
    "\014\047\015\050\016\045\017\051\001\002\000\024\006" +
    "\uffe3\010\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\001\002\000\004\035\071\001\002\000" +
    "\004\012\072\001\002\000\004\004\073\001\002\000\004" +
    "\047\075\001\002\000\006\005\104\047\105\001\002\000" +
    "\022\006\uffdb\011\042\015\032\035\041\036\033\037\037" +
    "\040\031\044\036\001\002\000\004\006\077\001\002\000" +
    "\030\003\015\024\006\025\012\026\021\027\013\031\010" +
    "\032\005\034\016\035\020\043\007\046\017\001\002\000" +
    "\032\003\015\024\006\025\012\026\021\027\013\031\010" +
    "\032\005\034\016\035\020\043\007\046\017\051\102\001" +
    "\002\000\040\002\uffff\003\uffff\004\uffff\005\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\031\uffff\032\uffff\034\uffff\035" +
    "\uffff\043\uffff\046\uffff\051\uffff\001\002\000\004\010\103" +
    "\001\002\000\006\005\uffea\047\uffea\001\002\000\040\002" +
    "\uffef\003\uffef\004\uffef\005\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\031\uffef\032\uffef\034\uffef\035\uffef\043\uffef\046" +
    "\uffef\051\uffef\001\002\000\022\006\uffdb\011\042\015\032" +
    "\035\041\036\033\037\037\040\031\044\036\001\002\000" +
    "\004\006\107\001\002\000\030\003\015\024\006\025\012" +
    "\026\021\027\013\031\010\032\005\034\016\035\020\043" +
    "\007\046\017\001\002\000\032\003\015\024\006\025\012" +
    "\026\021\027\013\031\010\032\005\034\016\035\020\043" +
    "\007\046\017\051\111\001\002\000\004\010\112\001\002" +
    "\000\006\005\uffeb\047\uffeb\001\002\000\020\011\042\015" +
    "\032\035\041\036\033\037\037\040\031\044\036\001\002" +
    "\000\014\012\uffdc\014\047\015\050\016\045\017\051\001" +
    "\002\000\004\012\116\001\002\000\004\010\117\001\002" +
    "\000\040\002\ufffd\003\ufffd\004\ufffd\005\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\031\ufffd\032\ufffd\034\ufffd\035\ufffd" +
    "\043\ufffd\046\ufffd\051\ufffd\001\002\000\020\011\042\012" +
    "\uffdb\015\032\035\041\036\033\040\031\044\036\001\002" +
    "\000\016\014\047\015\050\016\045\017\051\020\057\021" +
    "\060\001\002\000\004\012\123\001\002\000\004\004\124" +
    "\001\002\000\030\003\015\024\006\025\012\026\021\027" +
    "\013\031\010\032\005\034\016\035\020\043\007\046\017" +
    "\001\002\000\032\003\015\005\126\024\006\025\012\026" +
    "\021\027\013\031\010\032\005\034\016\035\020\043\007" +
    "\046\017\001\002\000\042\002\ufff7\003\ufff7\004\ufff7\005" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\130\031\ufff7" +
    "\032\ufff7\034\ufff7\035\ufff7\043\ufff7\046\ufff7\051\ufff7\001" +
    "\002\000\042\002\ufff5\003\ufff5\004\ufff5\005\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\143\031\ufff5\032\ufff5\034" +
    "\ufff5\035\ufff5\043\ufff5\046\ufff5\051\ufff5\001\002\000\006" +
    "\004\131\027\132\001\002\000\030\003\015\024\006\025" +
    "\012\026\021\027\013\031\010\032\005\034\016\035\020" +
    "\043\007\046\017\001\002\000\004\011\133\001\002\000" +
    "\020\011\042\012\uffdb\015\032\035\041\036\033\040\031" +
    "\044\036\001\002\000\004\012\135\001\002\000\004\004" +
    "\136\001\002\000\030\003\015\024\006\025\012\026\021" +
    "\027\013\031\010\032\005\034\016\035\020\043\007\046" +
    "\017\001\002\000\032\003\015\005\140\024\006\025\012" +
    "\026\021\027\013\031\010\032\005\034\016\035\020\043" +
    "\007\046\017\001\002\000\042\002\uffec\003\uffec\004\uffec" +
    "\005\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\034\uffec\035\uffec\043\uffec\046\uffec\051\uffec" +
    "\001\002\000\032\003\015\005\142\024\006\025\012\026" +
    "\021\027\013\031\010\032\005\034\016\035\020\043\007" +
    "\046\017\001\002\000\040\002\ufff6\003\ufff6\004\ufff6\005" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\031\ufff6\032\ufff6" +
    "\034\ufff6\035\ufff6\043\ufff6\046\ufff6\051\ufff6\001\002\000" +
    "\006\005\144\011\145\001\002\000\030\003\015\024\006" +
    "\025\012\026\021\027\013\031\010\032\005\034\016\035" +
    "\020\043\007\046\017\001\002\000\020\011\042\012\uffdb" +
    "\015\032\035\041\036\033\040\031\044\036\001\002\000" +
    "\004\012\147\001\002\000\004\004\150\001\002\000\030" +
    "\003\015\024\006\025\012\026\021\027\013\031\010\032" +
    "\005\034\016\035\020\043\007\046\017\001\002\000\032" +
    "\003\015\005\152\024\006\025\012\026\021\027\013\031" +
    "\010\032\005\034\016\035\020\043\007\046\017\001\002" +
    "\000\042\002\uffed\003\uffed\004\uffed\005\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\034\uffed" +
    "\035\uffed\043\uffed\046\uffed\051\uffed\001\002\000\032\003" +
    "\015\004\154\024\006\025\012\026\021\027\013\031\010" +
    "\032\005\034\016\035\020\043\007\046\017\001\002\000" +
    "\040\002\ufff4\003\ufff4\004\ufff4\005\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\031\ufff4\032\ufff4\034\ufff4\035\ufff4\043" +
    "\ufff4\046\ufff4\051\ufff4\001\002\000\004\010\156\001\002" +
    "\000\040\002\ufffb\003\ufffb\004\ufffb\005\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\031\ufffb\032\ufffb\034\ufffb\035\ufffb" +
    "\043\ufffb\046\ufffb\051\ufffb\001\002\000\004\002\001\001" +
    "\002\000\004\036\161\001\002\000\004\007\162\001\002" +
    "\000\004\036\163\001\002\000\004\012\164\001\002\000" +
    "\004\004\165\001\002\000\030\003\015\024\006\025\012" +
    "\026\021\027\013\031\010\032\005\034\016\035\020\043" +
    "\007\046\017\001\002\000\032\003\015\005\167\024\006" +
    "\025\012\026\021\027\013\031\010\032\005\034\016\035" +
    "\020\043\007\046\017\001\002\000\040\002\ufff0\003\ufff0" +
    "\004\ufff0\005\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\031" +
    "\ufff0\032\ufff0\034\ufff0\035\ufff0\043\ufff0\046\ufff0\051\ufff0" +
    "\001\002\000\004\010\171\001\002\000\040\002\ufff9\003" +
    "\ufff9\004\ufff9\005\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\031\ufff9\032\ufff9\034\ufff9\035\ufff9\043\ufff9\046\ufff9\051" +
    "\ufff9\001\002\000\004\010\173\001\002\000\040\002\ufffc" +
    "\003\ufffc\004\ufffc\005\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\031\ufffc\032\ufffc\034\ufffc\035\ufffc\043\ufffc\046\ufffc" +
    "\051\ufffc\001\002\000\020\011\042\012\uffdb\015\032\035" +
    "\041\036\033\040\031\044\036\001\002\000\004\012\176" +
    "\001\002\000\004\004\177\001\002\000\030\003\015\024" +
    "\006\025\012\026\021\027\013\031\010\032\005\034\016" +
    "\035\020\043\007\046\017\001\002\000\032\003\015\005" +
    "\201\024\006\025\012\026\021\027\013\031\010\032\005" +
    "\034\016\035\020\043\007\046\017\001\002\000\040\002" +
    "\ufff1\003\ufff1\004\ufff1\005\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\031\ufff1\032\ufff1\034\ufff1\035\ufff1\043\ufff1\046" +
    "\ufff1\051\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\010\002\010\003\013\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\033\011\042\012\034\013\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\054\001\001\000\002\001\001\000" +
    "\004\010\053\001\001\000\004\010\052\001\001\000\004" +
    "\010\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\064\001\001\000\004\010\061\001\001\000\004\010" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\073\001\001\000\002\001\001\000" +
    "\012\010\033\011\042\012\034\013\075\001\001\000\002" +
    "\001\001\000\006\003\077\004\003\001\001\000\004\004" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\033\011\042\012" +
    "\034\013\105\001\001\000\002\001\001\000\006\003\107" +
    "\004\003\001\001\000\004\004\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\113\011\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\120\012\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\124\004\003\001\001\000\004\004\100\001\001\000\004" +
    "\005\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\140\004\003\001\001\000\002\001\001\000\006" +
    "\010\120\012\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\136\004\003\001\001\000\004\004\100" +
    "\001\001\000\002\001\001\000\004\004\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\152\004\003" +
    "\001\001\000\006\010\120\012\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\150\004\003\001\001" +
    "\000\004\004\100\001\001\000\002\001\001\000\004\004" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\165\004\003\001\001\000\004\004\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\120\012" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\177\004\003\001\001\000\004\004\100\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private LinkedList<Instruction> AST;
    private LinkedList<String> errorList;
    private JTextArea textArea;

    public Parser(Lexer lex, JTextArea textArea){
        super(lex);
        this.AST = new LinkedList<Instruction>();
        this.errorList = new LinkedList<String>();
        this.textArea = textArea;
    }

     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Token token){ 
        errorList.add(String.format(report_error("Se encontro un error sintactico con el token: "+token.getLexeme()+" en la linea: "+token.getLine()+" en la columna: "+token.getColumn())));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        errorList.add(String.format(report_error("Error síntactico irrecuperable con el token: "+token.getLexeme()+" en la linea: "+token.getLine()+" en la columna: "+token.getColumn()))); 
    }  

    public LinkedList<Instruction> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= instructions_list 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions_list ::= instructions_list instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions_list ::= instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= WRITE LPAREN string_expression RPAREN SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(a, this.textArea); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= INT IDENTIFIER SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Declaration(a.getLexeme(), Type.NUMBER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= STRING IDENTIFIER SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Declaration(a.getLexeme(), Type.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= FLOAT IDENTIFIER SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Declaration(a.getLexeme(), Type.FLOAT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= CHARACTER IDENTIFIER SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Declaration(a.getLexeme(), Type.CHARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= IDENTIFIER EQUALS expressions SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(a.getLexeme(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE ELSE LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a,b,c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE else_ifs 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a,b,c,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE else_ifs ELSE RBRACE instructions_list LBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a,b,c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= IDENTIFIER INCREMENT SEMICOLON 
            {
              Instruction RESULT =null;
		 RESULT = new Increment(a.getLexeme()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= IDENTIFIER DECREMENT SEMICOLON 
            {
              Instruction RESULT =null;
		 RESULT = new Decrement(a.getLexeme()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= WHILE LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= FOR LPAREN INT_CONST COMMA INT_CONST RPAREN LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= SWITCH LPAREN IDENTIFIER RPAREN LBRACE case_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Switch(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= error 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // else_ifs ::= else_ifs ELSE LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(new If(b,c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_ifs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // else_ifs ::= ELSE IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> B = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new If(a,b)) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_ifs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // case_list ::= case_list CASE expressions COLON instructions_list BREAK SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = a; RESULT.add(new Case(b, c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // case_list ::= CASE expressions COLON instructions_list BREAK SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Case(a, b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // case_statement ::= CASE expressions COLON instructions_list BREAK SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Case(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // case_statement ::= DEFAULT COLON instructions_list BREAK SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Case(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numerical_expresion ::= numerical_expresion PLUS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, Operation.OperationType.ADDITION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numerical_expresion ::= numerical_expresion MINUS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, Operation.OperationType.SUBSTRACTION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numerical_expresion ::= numerical_expresion MULT numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, Operation.OperationType.MULTIPLICATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // numerical_expresion ::= numerical_expresion DIV numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, Operation.OperationType.DIVISION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // numerical_expresion ::= MINUS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, Operation.OperationType.NEGATIVE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numerical_expresion ::= LPAREN numerical_expresion RPAREN 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numerical_expresion ::= INT_CONST 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(new Double(a)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numerical_expresion ::= FLOAT_CONST 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(new Double(a)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numerical_expresion ::= CHARACTER_CONST 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a.getLexeme(), Operation.OperationType.CHARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // numerical_expresion ::= IDENTIFIER 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a.getLexeme(), Operation.OperationType.IDENTIFIER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // string_expression ::= STR_CONST 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a.getLexeme(), Operation.OperationType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // string_expression ::= numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logical_expression ::= 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logical_expression ::= numerical_expresion LT numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, Operation.OperationType.LESS_THAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logical_expression ::= numerical_expresion GT numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, Operation.OperationType.GREATHER_THAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logical_expression ::= numerical_expresion LT EQUALS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, Operation.OperationType.LESS_THAN_EQUALS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logical_expression ::= numerical_expresion GT EQUALS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, Operation.OperationType.GREATHER_THAN_EQUALS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressions ::= string_expression 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressions ::= logical_expression 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
