
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiladorchilero.analyzers;

import java.util.*;
import com.compiladorchilero.models.*;
import com.compiladorchilero.controllers.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\004\000\002" +
    "\004\006\000\002\004\011\000\002\004\015\000\002\004" +
    "\012\000\002\004\016\000\002\004\005\000\002\004\005" +
    "\000\002\004\011\000\002\004\013\000\002\004\011\000" +
    "\002\004\003\000\002\004\003\000\002\016\004\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\005\012\000\002\005\012" +
    "\000\002\006\011\000\002\006\010\000\002\010\010\000" +
    "\002\010\007\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\004\000\002\011" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\006\000\002\012\005\000" +
    "\002\012\005\000\002\012\006\000\002\012\006\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\011\000\002\014\012" +
    "\000\002\014\012\000\002\014\012\000\002\007\005\000" +
    "\002\007\003\000\002\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\040\003\024\024\007\025\021\026\022\027" +
    "\015\031\026\032\011\033\006\034\016\035\013\043\010" +
    "\046\014\054\020\055\030\056\023\001\002\000\004\010" +
    "\265\001\002\000\042\002\000\003\024\024\007\025\021" +
    "\026\022\027\015\031\026\032\011\033\006\034\016\035" +
    "\013\043\010\046\014\054\020\055\030\056\023\001\002" +
    "\000\004\011\261\001\002\000\004\035\uffe8\001\002\000" +
    "\004\035\uffe5\001\002\000\004\011\253\001\002\000\050" +
    "\002\uffeb\003\uffeb\004\uffeb\005\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\043\uffeb\046\uffeb\051\uffeb\054\uffeb\055\uffeb\056\uffeb\001" +
    "\002\000\010\013\244\041\246\042\245\001\002\000\004" +
    "\011\222\001\002\000\004\011\151\001\002\000\004\011" +
    "\075\001\002\000\004\035\074\001\002\000\004\035\uffe4" +
    "\001\002\000\004\035\uffe7\001\002\000\004\035\uffe6\001" +
    "\002\000\014\024\007\025\021\026\022\043\010\054\020" +
    "\001\002\000\050\002\uffea\003\uffea\004\uffea\005\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\043\uffea\046\uffea\051\uffea\054\uffea\055" +
    "\uffea\056\uffea\001\002\000\050\002\ufffe\003\ufffe\004\ufffe" +
    "\005\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\043\ufffe\046\ufffe\051\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\001\002\000\004\011\051\001" +
    "\002\000\004\002\050\001\002\000\004\035\031\001\002" +
    "\000\004\011\032\001\002\000\016\012\034\024\007\025" +
    "\021\026\022\043\010\054\020\001\002\000\010\004\uffc4" +
    "\007\uffc4\012\uffc4\001\002\000\004\004\045\001\002\000" +
    "\006\007\036\012\037\001\002\000\014\024\007\025\021" +
    "\026\022\043\010\054\020\001\002\000\004\004\040\001" +
    "\002\000\040\003\024\024\007\025\021\026\022\027\015" +
    "\031\026\032\011\033\006\034\016\035\013\043\010\046" +
    "\014\054\020\055\030\056\023\001\002\000\042\003\024" +
    "\005\042\024\007\025\021\026\022\027\015\031\026\032" +
    "\011\033\006\034\016\035\013\043\010\046\014\054\020" +
    "\055\030\056\023\001\002\000\050\002\uffc8\003\uffc8\004" +
    "\uffc8\005\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\043\uffc8\046\uffc8\051" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\001\002\000\050\002\uffff" +
    "\003\uffff\004\uffff\005\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\043\uffff" +
    "\046\uffff\051\uffff\054\uffff\055\uffff\056\uffff\001\002\000" +
    "\010\004\uffc5\007\uffc5\012\uffc5\001\002\000\040\003\024" +
    "\024\007\025\021\026\022\027\015\031\026\032\011\033" +
    "\006\034\016\035\013\043\010\046\014\054\020\055\030" +
    "\056\023\001\002\000\042\003\024\005\047\024\007\025" +
    "\021\026\022\027\015\031\026\032\011\033\006\034\016" +
    "\035\013\043\010\046\014\054\020\055\030\056\023\001" +
    "\002\000\050\002\uffc9\003\uffc9\004\uffc9\005\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\043\uffc9\046\uffc9\051\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\001\002\000\004\002\001\001\002\000\004\036" +
    "\052\001\002\000\004\007\053\001\002\000\004\036\054" +
    "\001\002\000\004\012\055\001\002\000\004\004\056\001" +
    "\002\000\040\003\024\024\007\025\021\026\022\027\015" +
    "\031\026\032\011\033\006\034\016\035\013\043\010\046" +
    "\014\054\020\055\030\056\023\001\002\000\042\003\024" +
    "\005\060\024\007\025\021\026\022\027\015\031\026\032" +
    "\011\033\006\034\016\035\013\043\010\046\014\054\020" +
    "\055\030\056\023\001\002\000\050\002\uffed\003\uffed\004" +
    "\uffed\005\uffed\024\uffed\025\uffed\026\uffed\027\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\043\uffed\046\uffed\051" +
    "\uffed\054\uffed\055\uffed\056\uffed\001\002\000\004\035\062" +
    "\001\002\000\004\011\063\001\002\000\016\012\064\024" +
    "\007\025\021\026\022\043\010\054\020\001\002\000\004" +
    "\004\071\001\002\000\006\004\066\007\036\001\002\000" +
    "\040\003\024\024\007\025\021\026\022\027\015\031\026" +
    "\032\011\033\006\034\016\035\013\043\010\046\014\054" +
    "\020\055\030\056\023\001\002\000\042\003\024\005\070" +
    "\024\007\025\021\026\022\027\015\031\026\032\011\033" +
    "\006\034\016\035\013\043\010\046\014\054\020\055\030" +
    "\056\023\001\002\000\050\002\uffc6\003\uffc6\004\uffc6\005" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\043\uffc6\046\uffc6\051\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\001\002\000\040\003\024\024\007" +
    "\025\021\026\022\027\015\031\026\032\011\033\006\034" +
    "\016\035\013\043\010\046\014\054\020\055\030\056\023" +
    "\001\002\000\042\003\024\005\073\024\007\025\021\026" +
    "\022\027\015\031\026\032\011\033\006\034\016\035\013" +
    "\043\010\046\014\054\020\055\030\056\023\001\002\000" +
    "\050\002\uffc7\003\uffc7\004\uffc7\005\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\043\uffc7\046\uffc7\051\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\001\002\000\012\004\uffe9\007\uffe9\010\uffe9\012\uffe9\001" +
    "\002\000\024\011\111\015\077\035\107\036\100\037\105" +
    "\040\076\044\104\052\103\053\106\001\002\000\016\012" +
    "\147\014\uffd6\015\uffd6\016\uffd6\017\uffd6\057\uffd6\001\002" +
    "\000\016\011\111\015\077\035\115\036\117\040\116\044" +
    "\113\001\002\000\016\012\144\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\057\uffd7\001\002\000\022\006\uffce\010\uffce\012" +
    "\uffce\014\122\015\123\016\121\017\124\057\uffce\001\002" +
    "\000\006\012\137\057\140\001\002\000\014\006\uffcb\010" +
    "\uffcb\012\uffcb\013\uffcb\057\uffcb\001\002\000\016\012\135" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\057\uffd5\001\002\000" +
    "\006\012\133\057\uffcd\001\002\000\014\006\uffca\010\uffca" +
    "\012\uffca\013\uffca\057\uffca\001\002\000\016\012\131\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\057\uffd4\001\002\000\006" +
    "\012\uffc2\057\uffc2\001\002\000\016\011\111\015\077\035" +
    "\115\036\117\040\116\044\113\001\002\000\014\006\uffcc" +
    "\010\uffcc\012\uffcc\013\uffcc\057\uffcc\001\002\000\030\006" +
    "\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\057\uffd5\001\002\000\014\012" +
    "\120\014\122\015\123\016\121\017\124\001\002\000\030" +
    "\006\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\057\uffd4\001\002\000\030" +
    "\006\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\057\uffd6\001\002\000\030" +
    "\006\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\057\uffd7\001\002\000\030" +
    "\006\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\057\uffd8\001\002\000\016" +
    "\011\111\015\077\035\115\036\117\040\116\044\113\001" +
    "\002\000\016\011\111\015\077\035\115\036\117\040\116" +
    "\044\113\001\002\000\016\011\111\015\077\035\115\036" +
    "\117\040\116\044\113\001\002\000\016\011\111\015\077" +
    "\035\115\036\117\040\116\044\113\001\002\000\030\006" +
    "\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\057\uffda\001\002\000\030\006" +
    "\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\121" +
    "\017\124\020\uffdc\021\uffdc\057\uffdc\001\002\000\030\006" +
    "\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\121" +
    "\017\124\020\uffdd\021\uffdd\057\uffdd\001\002\000\030\006" +
    "\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\057\uffdb\001\002\000\004\010" +
    "\132\001\002\000\050\002\ufff9\003\ufff9\004\ufff9\005\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\043\ufff9\046\ufff9\051\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\001\002\000\004\010\134\001\002\000" +
    "\050\002\ufffd\003\ufffd\004\ufffd\005\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\043\ufffd\046\ufffd\051\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\001\002\000\004\010\136\001\002\000\050\002\ufffa\003" +
    "\ufffa\004\ufffa\005\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\043\ufffa\046" +
    "\ufffa\051\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000\004" +
    "\010\143\001\002\000\024\011\111\015\077\035\115\036" +
    "\117\037\142\040\116\044\113\052\103\053\106\001\002" +
    "\000\006\012\uffc3\057\uffc3\001\002\000\014\006\uffcd\010" +
    "\uffcd\012\uffcd\013\uffcd\057\uffcd\001\002\000\050\002\ufff8" +
    "\003\ufff8\004\ufff8\005\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\043\ufff8" +
    "\046\ufff8\051\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000" +
    "\004\010\145\001\002\000\050\002\ufffc\003\ufffc\004\ufffc" +
    "\005\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\043\ufffc\046\ufffc\051\ufffc" +
    "\054\ufffc\055\ufffc\056\ufffc\001\002\000\030\006\uffd9\010" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\057\uffd9\001\002\000\004\010\150\001" +
    "\002\000\050\002\ufffb\003\ufffb\004\ufffb\005\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\043\ufffb\046\ufffb\051\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\001\002\000\024\011\111\015\077\035\115\036" +
    "\117\037\142\040\116\044\113\052\103\053\106\001\002" +
    "\000\020\013\uffce\014\122\015\123\016\121\017\124\020" +
    "\212\021\213\001\002\000\004\012\160\001\002\000\004" +
    "\013\155\001\002\000\004\013\156\001\002\000\024\011" +
    "\111\015\077\035\115\036\117\037\142\040\116\044\113" +
    "\052\103\053\106\001\002\000\004\012\uffd3\001\002\000" +
    "\004\004\161\001\002\000\040\003\024\024\007\025\021" +
    "\026\022\027\015\031\026\032\011\033\006\034\016\035" +
    "\013\043\010\046\014\054\020\055\030\056\023\001\002" +
    "\000\042\003\024\005\163\024\007\025\021\026\022\027" +
    "\015\031\026\032\011\033\006\034\016\035\013\043\010" +
    "\046\014\054\020\055\030\056\023\001\002\000\052\002" +
    "\ufff4\003\ufff4\004\ufff4\005\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\165\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\043\ufff4\046\ufff4\051\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\001\002\000\052\002\ufff2\003\ufff2\004\ufff2\005\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\200\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\043\ufff2\046\ufff2\051\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\001\002\000\006\004\166\027\167" +
    "\001\002\000\040\003\024\024\007\025\021\026\022\027" +
    "\015\031\026\032\011\033\006\034\016\035\013\043\010" +
    "\046\014\054\020\055\030\056\023\001\002\000\004\011" +
    "\170\001\002\000\024\011\111\015\077\035\115\036\117" +
    "\037\142\040\116\044\113\052\103\053\106\001\002\000" +
    "\004\012\172\001\002\000\004\004\173\001\002\000\040" +
    "\003\024\024\007\025\021\026\022\027\015\031\026\032" +
    "\011\033\006\034\016\035\013\043\010\046\014\054\020" +
    "\055\030\056\023\001\002\000\042\003\024\005\175\024" +
    "\007\025\021\026\022\027\015\031\026\032\011\033\006" +
    "\034\016\035\013\043\010\046\014\054\020\055\030\056" +
    "\023\001\002\000\052\002\uffe2\003\uffe2\004\uffe2\005\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\043\uffe2\046\uffe2\051\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\001\002\000\042\003\024\005" +
    "\177\024\007\025\021\026\022\027\015\031\026\032\011" +
    "\033\006\034\016\035\013\043\010\046\014\054\020\055" +
    "\030\056\023\001\002\000\050\002\ufff3\003\ufff3\004\ufff3" +
    "\005\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\043\ufff3\046\ufff3\051\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\001\002\000\006\005\201\011" +
    "\202\001\002\000\040\003\024\024\007\025\021\026\022" +
    "\027\015\031\026\032\011\033\006\034\016\035\013\043" +
    "\010\046\014\054\020\055\030\056\023\001\002\000\024" +
    "\011\111\015\077\035\115\036\117\037\142\040\116\044" +
    "\113\052\103\053\106\001\002\000\004\012\204\001\002" +
    "\000\004\004\205\001\002\000\040\003\024\024\007\025" +
    "\021\026\022\027\015\031\026\032\011\033\006\034\016" +
    "\035\013\043\010\046\014\054\020\055\030\056\023\001" +
    "\002\000\042\003\024\005\207\024\007\025\021\026\022" +
    "\027\015\031\026\032\011\033\006\034\016\035\013\043" +
    "\010\046\014\054\020\055\030\056\023\001\002\000\052" +
    "\002\uffe3\003\uffe3\004\uffe3\005\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\043\uffe3\046\uffe3\051\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\001\002\000\042\003\024\004\211\024\007\025\021" +
    "\026\022\027\015\031\026\032\011\033\006\034\016\035" +
    "\013\043\010\046\014\054\020\055\030\056\023\001\002" +
    "\000\050\002\ufff1\003\ufff1\004\ufff1\005\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\043\ufff1\046\ufff1\051\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\001\002\000\020\011\111\013\217\015\077\035\115" +
    "\036\117\040\116\044\113\001\002\000\020\011\111\013" +
    "\214\015\077\035\115\036\117\040\116\044\113\001\002" +
    "\000\016\011\111\015\077\035\115\036\117\040\116\044" +
    "\113\001\002\000\014\012\uffd1\014\122\015\123\016\121" +
    "\017\124\001\002\000\014\012\uffcf\014\122\015\123\016" +
    "\121\017\124\001\002\000\016\011\111\015\077\035\115" +
    "\036\117\040\116\044\113\001\002\000\014\012\uffd2\014" +
    "\122\015\123\016\121\017\124\001\002\000\014\012\uffd0" +
    "\014\122\015\123\016\121\017\124\001\002\000\004\035" +
    "\223\001\002\000\004\012\224\001\002\000\004\004\225" +
    "\001\002\000\004\047\227\001\002\000\006\005\235\047" +
    "\236\001\002\000\024\011\111\015\077\035\115\036\117" +
    "\037\142\040\116\044\113\052\103\053\106\001\002\000" +
    "\004\006\231\001\002\000\040\003\024\024\007\025\021" +
    "\026\022\027\015\031\026\032\011\033\006\034\016\035" +
    "\013\043\010\046\014\054\020\055\030\056\023\001\002" +
    "\000\042\003\024\024\007\025\021\026\022\027\015\031" +
    "\026\032\011\033\006\034\016\035\013\043\010\046\014" +
    "\051\233\054\020\055\030\056\023\001\002\000\004\010" +
    "\234\001\002\000\006\005\uffe0\047\uffe0\001\002\000\050" +
    "\002\uffec\003\uffec\004\uffec\005\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\043\uffec\046\uffec\051\uffec\054\uffec\055\uffec\056\uffec\001" +
    "\002\000\024\011\111\015\077\035\115\036\117\037\142" +
    "\040\116\044\113\052\103\053\106\001\002\000\004\006" +
    "\240\001\002\000\040\003\024\024\007\025\021\026\022" +
    "\027\015\031\026\032\011\033\006\034\016\035\013\043" +
    "\010\046\014\054\020\055\030\056\023\001\002\000\042" +
    "\003\024\024\007\025\021\026\022\027\015\031\026\032" +
    "\011\033\006\034\016\035\013\043\010\046\014\051\242" +
    "\054\020\055\030\056\023\001\002\000\004\010\243\001" +
    "\002\000\006\005\uffe1\047\uffe1\001\002\000\024\011\111" +
    "\015\077\035\115\036\117\037\142\040\116\044\113\052" +
    "\103\053\106\001\002\000\004\010\250\001\002\000\004" +
    "\010\247\001\002\000\050\002\ufff0\003\ufff0\004\ufff0\005" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\043\ufff0\046\ufff0\051\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\001\002\000\050\002\uffef\003\uffef" +
    "\004\uffef\005\uffef\024\uffef\025\uffef\026\uffef\027\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\043\uffef\046\uffef" +
    "\051\uffef\054\uffef\055\uffef\056\uffef\001\002\000\004\010" +
    "\252\001\002\000\050\002\ufff5\003\ufff5\004\ufff5\005\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\043\ufff5\046\ufff5\051\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\001\002\000\024\011\111\015\077\035" +
    "\115\036\117\037\142\040\116\044\113\052\103\053\106" +
    "\001\002\000\004\012\255\001\002\000\004\004\256\001" +
    "\002\000\040\003\024\024\007\025\021\026\022\027\015" +
    "\031\026\032\011\033\006\034\016\035\013\043\010\046" +
    "\014\054\020\055\030\056\023\001\002\000\042\003\024" +
    "\005\260\024\007\025\021\026\022\027\015\031\026\032" +
    "\011\033\006\034\016\035\013\043\010\046\014\054\020" +
    "\055\030\056\023\001\002\000\050\002\uffee\003\uffee\004" +
    "\uffee\005\uffee\024\uffee\025\uffee\026\uffee\027\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\043\uffee\046\uffee\051" +
    "\uffee\054\uffee\055\uffee\056\uffee\001\002\000\004\035\262" +
    "\001\002\000\004\012\263\001\002\000\004\010\264\001" +
    "\002\000\050\002\ufff7\003\ufff7\004\ufff7\005\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\043\ufff7\046\ufff7\051\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\001\002\000\050\002\ufff6\003\ufff6\004\ufff6\005" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\043\ufff6\046\ufff6\051\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\016\002\026\003\004\004\024\014\011\015" +
    "\016\016\003\001\001\000\002\001\001\000\012\004\042" +
    "\014\011\015\016\016\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\034\015\016\016\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\016\016" +
    "\043\001\001\000\002\001\001\000\014\003\040\004\024" +
    "\014\011\015\016\016\003\001\001\000\012\004\042\014" +
    "\011\015\016\016\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\045\004\024\014" +
    "\011\015\016\016\003\001\001\000\012\004\042\014\011" +
    "\015\016\016\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\056\004" +
    "\024\014\011\015\016\016\003\001\001\000\012\004\042" +
    "\014\011\015\016\016\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\064\015\016" +
    "\016\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\066\004\024\014\011\015\016\016\003\001\001" +
    "\000\012\004\042\014\011\015\016\016\003\001\001\000" +
    "\002\001\001\000\014\003\071\004\024\014\011\015\016" +
    "\016\003\001\001\000\012\004\042\014\011\015\016\016" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\100\013\111\017\107\020\101\001\001\000\002\001" +
    "\001\000\004\011\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\127\001\001\000\004\011\126\001\001\000\004" +
    "\011\125\001\001\000\004\011\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\100\013\111\017\107\020\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\151\012\152" +
    "\013\111\017\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\100" +
    "\013\111\017\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\161\004\024\014\011\015\016\016\003" +
    "\001\001\000\012\004\042\014\011\015\016\016\003\001" +
    "\001\000\004\005\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\175\004\024\014\011\015\016\016" +
    "\003\001\001\000\002\001\001\000\012\011\151\012\170" +
    "\013\111\017\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\173\004\024\014\011\015\016\016\003" +
    "\001\001\000\012\004\042\014\011\015\016\016\003\001" +
    "\001\000\002\001\001\000\012\004\042\014\011\015\016" +
    "\016\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\207\004\024\014\011\015\016\016\003\001\001" +
    "\000\012\011\151\012\202\013\111\017\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\205\004\024" +
    "\014\011\015\016\016\003\001\001\000\012\004\042\014" +
    "\011\015\016\016\003\001\001\000\002\001\001\000\012" +
    "\004\042\014\011\015\016\016\003\001\001\000\002\001" +
    "\001\000\004\011\217\001\001\000\004\011\214\001\001" +
    "\000\004\011\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\225\001\001\000\002\001\001\000\010" +
    "\011\100\013\111\017\227\001\001\000\002\001\001\000" +
    "\014\003\231\004\024\014\011\015\016\016\003\001\001" +
    "\000\012\004\042\014\011\015\016\016\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\100\013\111\017\236\001\001\000\002\001\001\000" +
    "\014\003\240\004\024\014\011\015\016\016\003\001\001" +
    "\000\012\004\042\014\011\015\016\016\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\100\013\111" +
    "\017\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\151\012\253\013\111\017\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\256" +
    "\004\024\014\011\015\016\016\003\001\001\000\012\004" +
    "\042\014\011\015\016\016\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private LinkedList<Instruction> AST;
    private LinkedList<String> errorList;

    public Parser(Lexer lex){
        super(lex);
        this.AST = new LinkedList<Instruction>();
        this.errorList = new LinkedList<String>();
    }

    public void syntax_error(Token token){ 
        errorList.add("Error Sintáctico en la Línea " + token.getLine() +" Columna "+token.getColumn()+ ". No se esperaba este componente: " +token.getLexeme()+".");
    } 

    public void unrecovered_syntax_error(Token token) throws java.lang.Exception{ 
        errorList.add("Error síntactico irrecuperable en la Línea " + token.getLine()+ " Columna "+token.getColumn()+". Componente " + token.getLexeme() + " no reconocido.");
    }  

    public LinkedList<Instruction> getAST() {
        return AST;
    }

    public LinkedList<String> getErrorList(){
        return errorList;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= instructions_list 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.AST=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions_list ::= instructions_list instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions_list ::= instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= WRITE LPAREN STR_CONST RPAREN SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(new Operation(a.getLexeme(), OperationType.STRING)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= WRITE LPAREN INT_CONST RPAREN SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(new Operation(a.getLexeme(), OperationType.NUMBER)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= WRITE LPAREN FLOAT_CONST RPAREN SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(new Operation(a.getLexeme(), OperationType.FLOAT)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= WRITE LPAREN CHARACTER_CONST RPAREN SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(new Operation(a.getLexeme(), OperationType.CHARACTER)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= WRITE LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(a.getLexeme(), new Operation(a.getLexeme(), OperationType.IDENTIFIER), OperationType.IDENTIFIER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= WRITE LPAREN concat_expr RPAREN SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Read(a.getLexeme()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= declaration SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= IDENTIFIER EQUALS value SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(a.getLexeme(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE ELSE LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a,b,c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE else_ifs 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a,b,c,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE else_ifs ELSE RBRACE instructions_list LBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(a,b,c,d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= IDENTIFIER INCREMENT SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Increment(a.getLexeme()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= IDENTIFIER DECREMENT SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Decrement(a.getLexeme()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= WHILE LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= FOR LPAREN INT_CONST COMMA INT_CONST RPAREN LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(Integer.valueOf(a.getLexeme()), Integer.valueOf(b.getLexeme()), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= SWITCH LPAREN IDENTIFIER RPAREN LBRACE case_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Switch(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= function 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= error 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= var_type IDENTIFIER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                                                                                switch(a){
                                                                                                                                                    case "cadena":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.STRING);
                                                                                                                                                    break;
                                                                                                                                                    case "entero":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.NUMBER);
                                                                                                                                                    break;
                                                                                                                                                    case "flotante":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.FLOAT);
                                                                                                                                                    break;
                                                                                                                                                    case "caracter":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.CHARACTER);
                                                                                                                                                    break;
                                                                                                                                                    case "booleano":
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.BOOLEAN);
                                                                                                                                                    break;
                                                                                                                                                    default:
                                                                                                                                                        RESULT = new Declaration(i.getLexeme(), Type.INVALID);
                                                                                                                                                    break;
                                                                                                                                                }                            
                                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_type ::= INT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.getLexeme(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_type ::= STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.getLexeme(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_type ::= FLOAT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.getLexeme(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_type ::= CHARACTER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.getLexeme(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_type ::= BOOLEAN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.getLexeme(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // else_ifs ::= else_ifs ELSE LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(new If(b,c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_ifs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // else_ifs ::= ELSE IF LPAREN logical_expression RPAREN LBRACE instructions_list RBRACE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new If(a,b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_ifs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // case_list ::= case_list CASE value COLON instructions_list BREAK SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = a; RESULT.add(new Case(b, c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // case_list ::= CASE value COLON instructions_list BREAK SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Case(a, b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // case_statement ::= CASE value COLON instructions_list BREAK SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Case(a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // case_statement ::= DEFAULT COLON instructions_list BREAK SEMICOLON 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Case(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // numerical_expresion ::= numerical_expresion PLUS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, OperationType.ADDITION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // numerical_expresion ::= numerical_expresion MINUS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, OperationType.SUBSTRACTION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // numerical_expresion ::= numerical_expresion MULT numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, OperationType.MULTIPLICATION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // numerical_expresion ::= numerical_expresion DIV numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, OperationType.DIVISION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // numerical_expresion ::= MINUS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, OperationType.NEGATIVE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // numerical_expresion ::= LPAREN numerical_expresion RPAREN 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // numerical_expresion ::= INT_CONST 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(new Double(a.getLexeme())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // numerical_expresion ::= FLOAT_CONST 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(new Double(a.getLexeme()), OperationType.FLOAT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // numerical_expresion ::= CHARACTER_CONST 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a.getLexeme(), OperationType.CHARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // numerical_expresion ::= IDENTIFIER 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a.getLexeme(), OperationType.IDENTIFIER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_expresion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logical_expression ::= value EQUALS EQUALS value 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, OperationType.EQUALS_EQUALS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logical_expression ::= numerical_expresion LT numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, OperationType.LESS_THAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logical_expression ::= numerical_expresion GT numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, OperationType.GREATHER_THAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logical_expression ::= numerical_expresion LT EQUALS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, OperationType.LESS_THAN_EQUALS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logical_expression ::= numerical_expresion GT EQUALS numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a, b, OperationType.GREATHER_THAN_EQUALS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= numerical_expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= STR_CONST 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a.getLexeme(), OperationType.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= boolean_value 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boolean_value ::= TRUE 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a.getLexeme(), OperationType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_value",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // boolean_value ::= FALSE 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operation(a.getLexeme(), OperationType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_value",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function ::= VOID IDENTIFIER LPAREN RPAREN LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDeclaration(a.getLexeme(), i);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function ::= VOID IDENTIFIER LPAREN parameter_list RPAREN LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDeclaration(a.getLexeme(), p, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function ::= FUNC var_type IDENTIFIER LPAREN RPAREN LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDeclaration(a, n.getLexeme(), i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // function ::= FUNC var_type IDENTIFIER LPAREN parameter_list LBRACE instructions_list RBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruction> p = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> i = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDeclaration(a, n.getLexeme(), p, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameter_list ::= parameter_list COMMA declaration 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameter_list ::= declaration 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // concat_expr ::= concat_expr CONCAT concat_expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operation(a,b,OperationType.CONCAT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat_expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // concat_expr ::= value 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("concat_expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
